{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to osxmetadata osxmetadata provides a simple interface to access various metadata about MacOS / OS X files. Currently supported metadata attributes include tags/keywords, Finder comments, authors, etc. Reference Create an OSXMetaData object to access file metadata Source code in osxmetadata/osxmetadata.pyclass OSXMetaData : \"\"\"Create an OSXMetaData object to access file metadata\"\"\" def __init__ ( self , fname : str ): \"\"\"Create an OSXMetaData object to access file metadata fname: filename to operate on \"\"\" self . _fname = pathlib . Path ( fname ) if not self . _fname . exists (): raise FileNotFoundError ( f \"file does not exist: { fname } \" ) self . _posix_path = self . _fname . resolve () . as_posix () # Create MDItemRef, NSURL, and xattr objects # MDItemRef is used for most attributes # NSURL and xattr are required for certain attributes like Finder tags # Because many of the getter/setter functions require some combination of MDItemRef, NSURL, and xattr, # they are created here and kept for the life of the object so that they don't have to be # recreated for each attribute # This does mean that if the file is moved or renamed, the object will still be pointing to the old file # thus you should not rename or move a file while using an OSXMetaData object self . _mditem : CoreServices . MDItemRef = CoreServices . MDItemCreate ( None , self . _posix_path ) if not self . _mditem : raise OSError ( f \"Unable to create MDItem for file: { fname } \" ) self . _url = NSURL . fileURLWithPath_ ( self . _posix_path ) self . _xattr = xattr . xattr ( self . _posix_path ) # Required so __setattr__ gets handled correctly during __init__ self . __init = True def get ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value attribute: metadata attribute name \"\"\" return self . __getattr__ ( attribute ) def set ( self , attribute : str , value : MDItemValueType ): \"\"\"Set metadata attribute value Args: attribute: metadata attribute name value: value to set attribute to; must match the type expected by the attribute (e.g. str or list) \"\"\" self . __setattr__ ( attribute , value ) def get_xattr ( self , key : str , decode : t . Callable [[ t . ByteString ], t . Any ] = None ) -> t . Any : \"\"\"Get xattr value Args: key: xattr name decode: optional Callable to decode value before returning \"\"\" xattr = self . _xattr [ key ] if decode : xattr = decode ( xattr ) return xattr def set_xattr ( self , key : str , value : t . Any , encode : t . Callable [[ t . ByteString ], t . Any ] = None ): \"\"\"Set xattr value Args: key: xattr name encode: optional Callable to encode value before setting \"\"\" if encode : value = encode ( value ) self . _xattr [ key ] = value def remove_xattr ( self , key : str ): \"\"\"Remove xattr Args: key: xattr name \"\"\" self . _xattr . remove ( key ) def asdict ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES ) -> t . Dict [ str , t . Any ]: \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a dict Args: attributes: set of attributes to include in dict Returns: dict of metadata \"\"\" return { key : getattr ( self , key ) for key in attributes } def to_json ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES , indent : int = 4 ) -> str : \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a JSON string Args: attributes: set of attributes to include in JSON indent: indent level for JSON output Returns: JSON string Notes: datetime objects are converted to ISO 8601 format binary objects are converted to base64 encoded strings the resulting JSON will include 3 additional keys: _version, _filepath, and _filename; these are expected by the CLI backup/restore commands \"\"\" dict_data = self . asdict ( attributes ) # add fields that backup/restore expects dict_data . update ( { \"_version\" : __version__ , \"_filepath\" : self . _posix_path , \"_filename\" : self . _fname . name , } ) for key , value in dict_data . items (): if isinstance ( value , datetime . datetime ): dict_data [ key ] = value . isoformat () elif isinstance ( value , ( list , tuple )): if value and isinstance ( value [ 0 ], datetime . datetime ): dict_data [ key ] = [ v . isoformat () for v in value ] elif isinstance ( value , bytes ): dict_data [ key ] = base64 . b64encode ( value ) . decode ( \"ascii\" ) return json . dumps ( dict_data , indent = indent ) def get_mditem_attribute_value ( self , attribute : str ) -> t . Any : \"\"\"Get the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name Returns: raw MDItem attribute value as returned by CoreServices.MDItemCopyAttribute() Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the get() method instead. \"\"\" return CoreServices . MDItemCopyAttribute ( self . _mditem , attribute ) def set_mditem_attribute_value ( self , attribute : str , value : t . Any ) -> bool : \"\"\"Set the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name value: value to set attribute to Returns: True if successful otherwise False Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the set() method instead. \"\"\" return MDItemSetAttribute ( self . _mditem , attribute , value ) @property def path ( self ) -> str : \"\"\"Return path to file\"\"\" return self . _posix_path def __getattr__ ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: attribute: metadata attribute name \"\"\" if attribute in [ \"tags\" , _kMDItemUserTags ]: return get_finder_tags ( self . _xattr ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments return get_mditem_metadata ( self . _mditem , MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] ) elif ( attribute in MDITEM_ATTRIBUTE_DATA or attribute in MDIMPORTER_ATTRIBUTE_DATA ): return get_mditem_metadata ( self . _mditem , attribute ) elif attribute in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , attribute ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: return get_finderinfo_bytes ( self . _xattr ) elif attribute == _kFinderStationeryPad : return get_finderinfo_stationerypad ( self . _xattr ) elif attribute == _kFinderColor : return get_finderinfo_color ( self . _xattr ) else : raise AttributeError ( f \"Invalid attribute: { attribute } \" ) def __setattr__ ( self , attribute : str , value : t . Any ): \"\"\"set metadata attribute value Args: attribute: metadata attribute name value: value to set \"\"\" try : if not self . __init : # during __init__ we don't want to call __setattr__ as it will # cause an infinite loop return super () . __setattr__ ( attribute , value ) if attribute in [ \"findercomment\" , kMDItemFinderComment ]: # finder comment cannot be set using MDItemSetAttribute set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif attribute in [ \"tags\" , _kMDItemUserTags ]: # handle Finder tags set_finder_tags ( self . _url , value ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments attribute_name = MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] set_or_remove_mditem_metadata ( self . _mditem , attribute_name , value ) elif attribute in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , attribute , value ) elif attribute in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , attribute , value ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: set_finderinfo_bytes ( self . _xattr , value ) elif attribute == _kFinderStationeryPad : set_finderinfo_stationerypad ( self . _xattr , bool ( value )) elif attribute == _kFinderColor : set_finderinfo_color ( self . _xattr , value ) elif attribute in ALL_ATTRIBUTES : raise OSXMetaDataAttributeError ( f \"Attribute { attribute } is read-only\" ) else : raise OSXMetaDataAttributeError ( f \"Invalid attribute: { attribute } \" ) except ( KeyError , AttributeError ): super () . __setattr__ ( attribute , value ) except OSXMetaDataAttributeError as e : raise AttributeError ( e ) from e def __getitem__ ( self , key : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: key: metadata attribute name \"\"\" if key == _kMDItemUserTags : return get_finder_tags ( self . _xattr ) elif key in MDITEM_ATTRIBUTE_DATA : return get_mditem_metadata ( self . _mditem , key ) elif key in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , key ) else : raise KeyError ( f \"Invalid key: { key } \" ) def __setitem__ ( self , key : str , value : t . Any ): \"\"\"set metadata attribute value Args: key: metadata attribute name value: value to set \"\"\" if key == _kMDItemUserTags : set_finder_tags ( self . _xattr , value ) elif key == kMDItemFinderComment : set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif key in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , key , value ) elif key in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , key , value ) elif key in ALL_ATTRIBUTES : raise KeyError ( f \"Attribute { key } is read-only\" ) else : raise KeyError ( f \"Invalid key: { key } \" ) path : str property Return path to file __getattr__ ( attribute ) Get metadata attribute value Parameters: Name Type Description Default attribute str metadata attribute name required Source code in osxmetadata/osxmetadata.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def __getattr__ ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: attribute: metadata attribute name \"\"\" if attribute in [ \"tags\" , _kMDItemUserTags ]: return get_finder_tags ( self . _xattr ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments return get_mditem_metadata ( self . _mditem , MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] ) elif ( attribute in MDITEM_ATTRIBUTE_DATA or attribute in MDIMPORTER_ATTRIBUTE_DATA ): return get_mditem_metadata ( self . _mditem , attribute ) elif attribute in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , attribute ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: return get_finderinfo_bytes ( self . _xattr ) elif attribute == _kFinderStationeryPad : return get_finderinfo_stationerypad ( self . _xattr ) elif attribute == _kFinderColor : return get_finderinfo_color ( self . _xattr ) else : raise AttributeError ( f \"Invalid attribute: { attribute } \" ) __getitem__ ( key ) Get metadata attribute value Parameters: Name Type Description Default key str metadata attribute name required Source code in osxmetadata/osxmetadata.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 def __getitem__ ( self , key : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: key: metadata attribute name \"\"\" if key == _kMDItemUserTags : return get_finder_tags ( self . _xattr ) elif key in MDITEM_ATTRIBUTE_DATA : return get_mditem_metadata ( self . _mditem , key ) elif key in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , key ) else : raise KeyError ( f \"Invalid key: { key } \" ) __init__ ( fname ) Create an OSXMetaData object to access file metadata fname: filename to operate on Source code in osxmetadata/osxmetadata.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def __init__ ( self , fname : str ): \"\"\"Create an OSXMetaData object to access file metadata fname: filename to operate on \"\"\" self . _fname = pathlib . Path ( fname ) if not self . _fname . exists (): raise FileNotFoundError ( f \"file does not exist: { fname } \" ) self . _posix_path = self . _fname . resolve () . as_posix () # Create MDItemRef, NSURL, and xattr objects # MDItemRef is used for most attributes # NSURL and xattr are required for certain attributes like Finder tags # Because many of the getter/setter functions require some combination of MDItemRef, NSURL, and xattr, # they are created here and kept for the life of the object so that they don't have to be # recreated for each attribute # This does mean that if the file is moved or renamed, the object will still be pointing to the old file # thus you should not rename or move a file while using an OSXMetaData object self . _mditem : CoreServices . MDItemRef = CoreServices . MDItemCreate ( None , self . _posix_path ) if not self . _mditem : raise OSError ( f \"Unable to create MDItem for file: { fname } \" ) self . _url = NSURL . fileURLWithPath_ ( self . _posix_path ) self . _xattr = xattr . xattr ( self . _posix_path ) # Required so __setattr__ gets handled correctly during __init__ self . __init = True __setattr__ ( attribute , value ) set metadata attribute value Parameters: Name Type Description Default attribute str metadata attribute name required value Any value to set required Source code in osxmetadata/osxmetadata.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 def __setattr__ ( self , attribute : str , value : t . Any ): \"\"\"set metadata attribute value Args: attribute: metadata attribute name value: value to set \"\"\" try : if not self . __init : # during __init__ we don't want to call __setattr__ as it will # cause an infinite loop return super () . __setattr__ ( attribute , value ) if attribute in [ \"findercomment\" , kMDItemFinderComment ]: # finder comment cannot be set using MDItemSetAttribute set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif attribute in [ \"tags\" , _kMDItemUserTags ]: # handle Finder tags set_finder_tags ( self . _url , value ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments attribute_name = MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] set_or_remove_mditem_metadata ( self . _mditem , attribute_name , value ) elif attribute in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , attribute , value ) elif attribute in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , attribute , value ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: set_finderinfo_bytes ( self . _xattr , value ) elif attribute == _kFinderStationeryPad : set_finderinfo_stationerypad ( self . _xattr , bool ( value )) elif attribute == _kFinderColor : set_finderinfo_color ( self . _xattr , value ) elif attribute in ALL_ATTRIBUTES : raise OSXMetaDataAttributeError ( f \"Attribute { attribute } is read-only\" ) else : raise OSXMetaDataAttributeError ( f \"Invalid attribute: { attribute } \" ) except ( KeyError , AttributeError ): super () . __setattr__ ( attribute , value ) except OSXMetaDataAttributeError as e : raise AttributeError ( e ) from e __setitem__ ( key , value ) set metadata attribute value Parameters: Name Type Description Default key str metadata attribute name required value Any value to set required Source code in osxmetadata/osxmetadata.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 def __setitem__ ( self , key : str , value : t . Any ): \"\"\"set metadata attribute value Args: key: metadata attribute name value: value to set \"\"\" if key == _kMDItemUserTags : set_finder_tags ( self . _xattr , value ) elif key == kMDItemFinderComment : set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif key in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , key , value ) elif key in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , key , value ) elif key in ALL_ATTRIBUTES : raise KeyError ( f \"Attribute { key } is read-only\" ) else : raise KeyError ( f \"Invalid key: { key } \" ) asdict ( attributes = ASDICT_ATTRIBUTES ) Return all MDItem metadata (or a subset defined by attributes) as a dict Parameters: Name Type Description Default attributes Set [ str ] set of attributes to include in dict ASDICT_ATTRIBUTES Returns: Type Description Dict [ str , Any ] dict of metadata Source code in osxmetadata/osxmetadata.py 153 154 155 156 157 158 159 160 161 162 def asdict ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES ) -> t . Dict [ str , t . Any ]: \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a dict Args: attributes: set of attributes to include in dict Returns: dict of metadata \"\"\" return { key : getattr ( self , key ) for key in attributes } get ( attribute ) Get metadata attribute value attribute: metadata attribute name Source code in osxmetadata/osxmetadata.py 103 104 105 106 107 def get ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value attribute: metadata attribute name \"\"\" return self . __getattr__ ( attribute ) get_mditem_attribute_value ( attribute ) Get the raw MDItem attribute value without any type conversion. Parameters: Name Type Description Default attribute str metadata attribute name required Returns: Type Description Any raw MDItem attribute value as returned by CoreServices.MDItemCopyAttribute() Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the get() method instead. Source code in osxmetadata/osxmetadata.py 205 206 207 208 209 210 211 212 213 214 215 216 217 def get_mditem_attribute_value ( self , attribute : str ) -> t . Any : \"\"\"Get the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name Returns: raw MDItem attribute value as returned by CoreServices.MDItemCopyAttribute() Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the get() method instead. \"\"\" return CoreServices . MDItemCopyAttribute ( self . _mditem , attribute ) get_xattr ( key , decode = None ) Get xattr value Parameters: Name Type Description Default key str xattr name required decode Callable [[ ByteString ], Any ] optional Callable to decode value before returning None Source code in osxmetadata/osxmetadata.py 118 119 120 121 122 123 124 125 126 127 128 129 130 def get_xattr ( self , key : str , decode : t . Callable [[ t . ByteString ], t . Any ] = None ) -> t . Any : \"\"\"Get xattr value Args: key: xattr name decode: optional Callable to decode value before returning \"\"\" xattr = self . _xattr [ key ] if decode : xattr = decode ( xattr ) return xattr remove_xattr ( key ) Remove xattr Parameters: Name Type Description Default key str xattr name required Source code in osxmetadata/osxmetadata.py 145 146 147 148 149 150 151 def remove_xattr ( self , key : str ): \"\"\"Remove xattr Args: key: xattr name \"\"\" self . _xattr . remove ( key ) set ( attribute , value ) Set metadata attribute value Parameters: Name Type Description Default attribute str metadata attribute name required value MDItemValueType value to set attribute to; must match the type expected by the attribute (e.g. str or list) required Source code in osxmetadata/osxmetadata.py 109 110 111 112 113 114 115 116 def set ( self , attribute : str , value : MDItemValueType ): \"\"\"Set metadata attribute value Args: attribute: metadata attribute name value: value to set attribute to; must match the type expected by the attribute (e.g. str or list) \"\"\" self . __setattr__ ( attribute , value ) set_mditem_attribute_value ( attribute , value ) Set the raw MDItem attribute value without any type conversion. Parameters: Name Type Description Default attribute str metadata attribute name required value Any value to set attribute to required Returns: True if successful otherwise False Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the set() method instead. Source code in osxmetadata/osxmetadata.py 219 220 221 222 223 224 225 226 227 228 229 230 231 def set_mditem_attribute_value ( self , attribute : str , value : t . Any ) -> bool : \"\"\"Set the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name value: value to set attribute to Returns: True if successful otherwise False Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the set() method instead. \"\"\" return MDItemSetAttribute ( self . _mditem , attribute , value ) set_xattr ( key , value , encode = None ) Set xattr value Parameters: Name Type Description Default key str xattr name required encode Callable [[ ByteString ], Any ] optional Callable to encode value before setting None Source code in osxmetadata/osxmetadata.py 132 133 134 135 136 137 138 139 140 141 142 143 def set_xattr ( self , key : str , value : t . Any , encode : t . Callable [[ t . ByteString ], t . Any ] = None ): \"\"\"Set xattr value Args: key: xattr name encode: optional Callable to encode value before setting \"\"\" if encode : value = encode ( value ) self . _xattr [ key ] = value to_json ( attributes = ASDICT_ATTRIBUTES , indent = 4 ) Return all MDItem metadata (or a subset defined by attributes) as a JSON string Parameters: Name Type Description Default attributes Set [ str ] set of attributes to include in JSON ASDICT_ATTRIBUTES indent int indent level for JSON output 4 Returns: Type Description str JSON string Notes datetime objects are converted to ISO 8601 format binary objects are converted to base64 encoded strings the resulting JSON will include 3 additional keys: _version, _filepath, and _filename; these are expected by the CLI backup/restore commands Source code in osxmetadata/osxmetadata.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def to_json ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES , indent : int = 4 ) -> str : \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a JSON string Args: attributes: set of attributes to include in JSON indent: indent level for JSON output Returns: JSON string Notes: datetime objects are converted to ISO 8601 format binary objects are converted to base64 encoded strings the resulting JSON will include 3 additional keys: _version, _filepath, and _filename; these are expected by the CLI backup/restore commands \"\"\" dict_data = self . asdict ( attributes ) # add fields that backup/restore expects dict_data . update ( { \"_version\" : __version__ , \"_filepath\" : self . _posix_path , \"_filename\" : self . _fname . name , } ) for key , value in dict_data . items (): if isinstance ( value , datetime . datetime ): dict_data [ key ] = value . isoformat () elif isinstance ( value , ( list , tuple )): if value and isinstance ( value [ 0 ], datetime . datetime ): dict_data [ key ] = [ v . isoformat () for v in value ] elif isinstance ( value , bytes ): dict_data [ key ] = base64 . b64encode ( value ) . decode ( \"ascii\" ) return json . dumps ( dict_data , indent = indent )","title":"Welcome to osxmetadata"},{"location":"#welcome-to-osxmetadata","text":"osxmetadata provides a simple interface to access various metadata about MacOS / OS X files. Currently supported metadata attributes include tags/keywords, Finder comments, authors, etc.","title":"Welcome to osxmetadata"},{"location":"#reference","text":"Create an OSXMetaData object to access file metadata Source code in osxmetadata/osxmetadata.pyclass OSXMetaData : \"\"\"Create an OSXMetaData object to access file metadata\"\"\" def __init__ ( self , fname : str ): \"\"\"Create an OSXMetaData object to access file metadata fname: filename to operate on \"\"\" self . _fname = pathlib . Path ( fname ) if not self . _fname . exists (): raise FileNotFoundError ( f \"file does not exist: { fname } \" ) self . _posix_path = self . _fname . resolve () . as_posix () # Create MDItemRef, NSURL, and xattr objects # MDItemRef is used for most attributes # NSURL and xattr are required for certain attributes like Finder tags # Because many of the getter/setter functions require some combination of MDItemRef, NSURL, and xattr, # they are created here and kept for the life of the object so that they don't have to be # recreated for each attribute # This does mean that if the file is moved or renamed, the object will still be pointing to the old file # thus you should not rename or move a file while using an OSXMetaData object self . _mditem : CoreServices . MDItemRef = CoreServices . MDItemCreate ( None , self . _posix_path ) if not self . _mditem : raise OSError ( f \"Unable to create MDItem for file: { fname } \" ) self . _url = NSURL . fileURLWithPath_ ( self . _posix_path ) self . _xattr = xattr . xattr ( self . _posix_path ) # Required so __setattr__ gets handled correctly during __init__ self . __init = True def get ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value attribute: metadata attribute name \"\"\" return self . __getattr__ ( attribute ) def set ( self , attribute : str , value : MDItemValueType ): \"\"\"Set metadata attribute value Args: attribute: metadata attribute name value: value to set attribute to; must match the type expected by the attribute (e.g. str or list) \"\"\" self . __setattr__ ( attribute , value ) def get_xattr ( self , key : str , decode : t . Callable [[ t . ByteString ], t . Any ] = None ) -> t . Any : \"\"\"Get xattr value Args: key: xattr name decode: optional Callable to decode value before returning \"\"\" xattr = self . _xattr [ key ] if decode : xattr = decode ( xattr ) return xattr def set_xattr ( self , key : str , value : t . Any , encode : t . Callable [[ t . ByteString ], t . Any ] = None ): \"\"\"Set xattr value Args: key: xattr name encode: optional Callable to encode value before setting \"\"\" if encode : value = encode ( value ) self . _xattr [ key ] = value def remove_xattr ( self , key : str ): \"\"\"Remove xattr Args: key: xattr name \"\"\" self . _xattr . remove ( key ) def asdict ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES ) -> t . Dict [ str , t . Any ]: \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a dict Args: attributes: set of attributes to include in dict Returns: dict of metadata \"\"\" return { key : getattr ( self , key ) for key in attributes } def to_json ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES , indent : int = 4 ) -> str : \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a JSON string Args: attributes: set of attributes to include in JSON indent: indent level for JSON output Returns: JSON string Notes: datetime objects are converted to ISO 8601 format binary objects are converted to base64 encoded strings the resulting JSON will include 3 additional keys: _version, _filepath, and _filename; these are expected by the CLI backup/restore commands \"\"\" dict_data = self . asdict ( attributes ) # add fields that backup/restore expects dict_data . update ( { \"_version\" : __version__ , \"_filepath\" : self . _posix_path , \"_filename\" : self . _fname . name , } ) for key , value in dict_data . items (): if isinstance ( value , datetime . datetime ): dict_data [ key ] = value . isoformat () elif isinstance ( value , ( list , tuple )): if value and isinstance ( value [ 0 ], datetime . datetime ): dict_data [ key ] = [ v . isoformat () for v in value ] elif isinstance ( value , bytes ): dict_data [ key ] = base64 . b64encode ( value ) . decode ( \"ascii\" ) return json . dumps ( dict_data , indent = indent ) def get_mditem_attribute_value ( self , attribute : str ) -> t . Any : \"\"\"Get the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name Returns: raw MDItem attribute value as returned by CoreServices.MDItemCopyAttribute() Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the get() method instead. \"\"\" return CoreServices . MDItemCopyAttribute ( self . _mditem , attribute ) def set_mditem_attribute_value ( self , attribute : str , value : t . Any ) -> bool : \"\"\"Set the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name value: value to set attribute to Returns: True if successful otherwise False Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the set() method instead. \"\"\" return MDItemSetAttribute ( self . _mditem , attribute , value ) @property def path ( self ) -> str : \"\"\"Return path to file\"\"\" return self . _posix_path def __getattr__ ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: attribute: metadata attribute name \"\"\" if attribute in [ \"tags\" , _kMDItemUserTags ]: return get_finder_tags ( self . _xattr ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments return get_mditem_metadata ( self . _mditem , MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] ) elif ( attribute in MDITEM_ATTRIBUTE_DATA or attribute in MDIMPORTER_ATTRIBUTE_DATA ): return get_mditem_metadata ( self . _mditem , attribute ) elif attribute in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , attribute ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: return get_finderinfo_bytes ( self . _xattr ) elif attribute == _kFinderStationeryPad : return get_finderinfo_stationerypad ( self . _xattr ) elif attribute == _kFinderColor : return get_finderinfo_color ( self . _xattr ) else : raise AttributeError ( f \"Invalid attribute: { attribute } \" ) def __setattr__ ( self , attribute : str , value : t . Any ): \"\"\"set metadata attribute value Args: attribute: metadata attribute name value: value to set \"\"\" try : if not self . __init : # during __init__ we don't want to call __setattr__ as it will # cause an infinite loop return super () . __setattr__ ( attribute , value ) if attribute in [ \"findercomment\" , kMDItemFinderComment ]: # finder comment cannot be set using MDItemSetAttribute set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif attribute in [ \"tags\" , _kMDItemUserTags ]: # handle Finder tags set_finder_tags ( self . _url , value ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments attribute_name = MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] set_or_remove_mditem_metadata ( self . _mditem , attribute_name , value ) elif attribute in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , attribute , value ) elif attribute in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , attribute , value ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: set_finderinfo_bytes ( self . _xattr , value ) elif attribute == _kFinderStationeryPad : set_finderinfo_stationerypad ( self . _xattr , bool ( value )) elif attribute == _kFinderColor : set_finderinfo_color ( self . _xattr , value ) elif attribute in ALL_ATTRIBUTES : raise OSXMetaDataAttributeError ( f \"Attribute { attribute } is read-only\" ) else : raise OSXMetaDataAttributeError ( f \"Invalid attribute: { attribute } \" ) except ( KeyError , AttributeError ): super () . __setattr__ ( attribute , value ) except OSXMetaDataAttributeError as e : raise AttributeError ( e ) from e def __getitem__ ( self , key : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: key: metadata attribute name \"\"\" if key == _kMDItemUserTags : return get_finder_tags ( self . _xattr ) elif key in MDITEM_ATTRIBUTE_DATA : return get_mditem_metadata ( self . _mditem , key ) elif key in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , key ) else : raise KeyError ( f \"Invalid key: { key } \" ) def __setitem__ ( self , key : str , value : t . Any ): \"\"\"set metadata attribute value Args: key: metadata attribute name value: value to set \"\"\" if key == _kMDItemUserTags : set_finder_tags ( self . _xattr , value ) elif key == kMDItemFinderComment : set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif key in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , key , value ) elif key in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , key , value ) elif key in ALL_ATTRIBUTES : raise KeyError ( f \"Attribute { key } is read-only\" ) else : raise KeyError ( f \"Invalid key: { key } \" )","title":"Reference"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.path","text":"Return path to file","title":"path"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.__getattr__","text":"Get metadata attribute value Parameters: Name Type Description Default attribute str metadata attribute name required Source code in osxmetadata/osxmetadata.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 def __getattr__ ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: attribute: metadata attribute name \"\"\" if attribute in [ \"tags\" , _kMDItemUserTags ]: return get_finder_tags ( self . _xattr ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments return get_mditem_metadata ( self . _mditem , MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] ) elif ( attribute in MDITEM_ATTRIBUTE_DATA or attribute in MDIMPORTER_ATTRIBUTE_DATA ): return get_mditem_metadata ( self . _mditem , attribute ) elif attribute in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , attribute ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: return get_finderinfo_bytes ( self . _xattr ) elif attribute == _kFinderStationeryPad : return get_finderinfo_stationerypad ( self . _xattr ) elif attribute == _kFinderColor : return get_finderinfo_color ( self . _xattr ) else : raise AttributeError ( f \"Invalid attribute: { attribute } \" )","title":"__getattr__()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.__getitem__","text":"Get metadata attribute value Parameters: Name Type Description Default key str metadata attribute name required Source code in osxmetadata/osxmetadata.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 def __getitem__ ( self , key : str ) -> MDItemValueType : \"\"\"Get metadata attribute value Args: key: metadata attribute name \"\"\" if key == _kMDItemUserTags : return get_finder_tags ( self . _xattr ) elif key in MDITEM_ATTRIBUTE_DATA : return get_mditem_metadata ( self . _mditem , key ) elif key in NSURL_RESOURCE_KEY_DATA : return get_nsurl_metadata ( self . _url , key ) else : raise KeyError ( f \"Invalid key: { key } \" )","title":"__getitem__()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.__init__","text":"Create an OSXMetaData object to access file metadata fname: filename to operate on Source code in osxmetadata/osxmetadata.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 def __init__ ( self , fname : str ): \"\"\"Create an OSXMetaData object to access file metadata fname: filename to operate on \"\"\" self . _fname = pathlib . Path ( fname ) if not self . _fname . exists (): raise FileNotFoundError ( f \"file does not exist: { fname } \" ) self . _posix_path = self . _fname . resolve () . as_posix () # Create MDItemRef, NSURL, and xattr objects # MDItemRef is used for most attributes # NSURL and xattr are required for certain attributes like Finder tags # Because many of the getter/setter functions require some combination of MDItemRef, NSURL, and xattr, # they are created here and kept for the life of the object so that they don't have to be # recreated for each attribute # This does mean that if the file is moved or renamed, the object will still be pointing to the old file # thus you should not rename or move a file while using an OSXMetaData object self . _mditem : CoreServices . MDItemRef = CoreServices . MDItemCreate ( None , self . _posix_path ) if not self . _mditem : raise OSError ( f \"Unable to create MDItem for file: { fname } \" ) self . _url = NSURL . fileURLWithPath_ ( self . _posix_path ) self . _xattr = xattr . xattr ( self . _posix_path ) # Required so __setattr__ gets handled correctly during __init__ self . __init = True","title":"__init__()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.__setattr__","text":"set metadata attribute value Parameters: Name Type Description Default attribute str metadata attribute name required value Any value to set required Source code in osxmetadata/osxmetadata.py 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 def __setattr__ ( self , attribute : str , value : t . Any ): \"\"\"set metadata attribute value Args: attribute: metadata attribute name value: value to set \"\"\" try : if not self . __init : # during __init__ we don't want to call __setattr__ as it will # cause an infinite loop return super () . __setattr__ ( attribute , value ) if attribute in [ \"findercomment\" , kMDItemFinderComment ]: # finder comment cannot be set using MDItemSetAttribute set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif attribute in [ \"tags\" , _kMDItemUserTags ]: # handle Finder tags set_finder_tags ( self . _url , value ) elif attribute in MDITEM_ATTRIBUTE_SHORT_NAMES : # handle dynamic properties like self.keywords and self.comments attribute_name = MDITEM_ATTRIBUTE_SHORT_NAMES [ attribute ] set_or_remove_mditem_metadata ( self . _mditem , attribute_name , value ) elif attribute in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , attribute , value ) elif attribute in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , attribute , value ) elif attribute in [ \"finderinfo\" , _kFinderInfo ]: set_finderinfo_bytes ( self . _xattr , value ) elif attribute == _kFinderStationeryPad : set_finderinfo_stationerypad ( self . _xattr , bool ( value )) elif attribute == _kFinderColor : set_finderinfo_color ( self . _xattr , value ) elif attribute in ALL_ATTRIBUTES : raise OSXMetaDataAttributeError ( f \"Attribute { attribute } is read-only\" ) else : raise OSXMetaDataAttributeError ( f \"Invalid attribute: { attribute } \" ) except ( KeyError , AttributeError ): super () . __setattr__ ( attribute , value ) except OSXMetaDataAttributeError as e : raise AttributeError ( e ) from e","title":"__setattr__()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.__setitem__","text":"set metadata attribute value Parameters: Name Type Description Default key str metadata attribute name required value Any value to set required Source code in osxmetadata/osxmetadata.py 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 def __setitem__ ( self , key : str , value : t . Any ): \"\"\"set metadata attribute value Args: key: metadata attribute name value: value to set \"\"\" if key == _kMDItemUserTags : set_finder_tags ( self . _xattr , value ) elif key == kMDItemFinderComment : set_or_remove_finder_comment ( self . _url , self . _xattr , value ) elif key in MDITEM_ATTRIBUTE_DATA : set_or_remove_mditem_metadata ( self . _mditem , key , value ) elif key in NSURL_RESOURCE_KEY_DATA : set_nsurl_metadata ( self . _url , key , value ) elif key in ALL_ATTRIBUTES : raise KeyError ( f \"Attribute { key } is read-only\" ) else : raise KeyError ( f \"Invalid key: { key } \" )","title":"__setitem__()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.asdict","text":"Return all MDItem metadata (or a subset defined by attributes) as a dict Parameters: Name Type Description Default attributes Set [ str ] set of attributes to include in dict ASDICT_ATTRIBUTES Returns: Type Description Dict [ str , Any ] dict of metadata Source code in osxmetadata/osxmetadata.py 153 154 155 156 157 158 159 160 161 162 def asdict ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES ) -> t . Dict [ str , t . Any ]: \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a dict Args: attributes: set of attributes to include in dict Returns: dict of metadata \"\"\" return { key : getattr ( self , key ) for key in attributes }","title":"asdict()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.get","text":"Get metadata attribute value attribute: metadata attribute name Source code in osxmetadata/osxmetadata.py 103 104 105 106 107 def get ( self , attribute : str ) -> MDItemValueType : \"\"\"Get metadata attribute value attribute: metadata attribute name \"\"\" return self . __getattr__ ( attribute )","title":"get()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.get_mditem_attribute_value","text":"Get the raw MDItem attribute value without any type conversion. Parameters: Name Type Description Default attribute str metadata attribute name required Returns: Type Description Any raw MDItem attribute value as returned by CoreServices.MDItemCopyAttribute() Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the get() method instead. Source code in osxmetadata/osxmetadata.py 205 206 207 208 209 210 211 212 213 214 215 216 217 def get_mditem_attribute_value ( self , attribute : str ) -> t . Any : \"\"\"Get the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name Returns: raw MDItem attribute value as returned by CoreServices.MDItemCopyAttribute() Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the get() method instead. \"\"\" return CoreServices . MDItemCopyAttribute ( self . _mditem , attribute )","title":"get_mditem_attribute_value()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.get_xattr","text":"Get xattr value Parameters: Name Type Description Default key str xattr name required decode Callable [[ ByteString ], Any ] optional Callable to decode value before returning None Source code in osxmetadata/osxmetadata.py 118 119 120 121 122 123 124 125 126 127 128 129 130 def get_xattr ( self , key : str , decode : t . Callable [[ t . ByteString ], t . Any ] = None ) -> t . Any : \"\"\"Get xattr value Args: key: xattr name decode: optional Callable to decode value before returning \"\"\" xattr = self . _xattr [ key ] if decode : xattr = decode ( xattr ) return xattr","title":"get_xattr()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.remove_xattr","text":"Remove xattr Parameters: Name Type Description Default key str xattr name required Source code in osxmetadata/osxmetadata.py 145 146 147 148 149 150 151 def remove_xattr ( self , key : str ): \"\"\"Remove xattr Args: key: xattr name \"\"\" self . _xattr . remove ( key )","title":"remove_xattr()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.set","text":"Set metadata attribute value Parameters: Name Type Description Default attribute str metadata attribute name required value MDItemValueType value to set attribute to; must match the type expected by the attribute (e.g. str or list) required Source code in osxmetadata/osxmetadata.py 109 110 111 112 113 114 115 116 def set ( self , attribute : str , value : MDItemValueType ): \"\"\"Set metadata attribute value Args: attribute: metadata attribute name value: value to set attribute to; must match the type expected by the attribute (e.g. str or list) \"\"\" self . __setattr__ ( attribute , value )","title":"set()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.set_mditem_attribute_value","text":"Set the raw MDItem attribute value without any type conversion. Parameters: Name Type Description Default attribute str metadata attribute name required value Any value to set attribute to required Returns: True if successful otherwise False Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the set() method instead. Source code in osxmetadata/osxmetadata.py 219 220 221 222 223 224 225 226 227 228 229 230 231 def set_mditem_attribute_value ( self , attribute : str , value : t . Any ) -> bool : \"\"\"Set the raw MDItem attribute value without any type conversion. Args: attribute: metadata attribute name value: value to set attribute to Returns: True if successful otherwise False Note: This is a low level function that you probably don't need to use, but may be useful in some cases. You should probably use the set() method instead. \"\"\" return MDItemSetAttribute ( self . _mditem , attribute , value )","title":"set_mditem_attribute_value()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.set_xattr","text":"Set xattr value Parameters: Name Type Description Default key str xattr name required encode Callable [[ ByteString ], Any ] optional Callable to encode value before setting None Source code in osxmetadata/osxmetadata.py 132 133 134 135 136 137 138 139 140 141 142 143 def set_xattr ( self , key : str , value : t . Any , encode : t . Callable [[ t . ByteString ], t . Any ] = None ): \"\"\"Set xattr value Args: key: xattr name encode: optional Callable to encode value before setting \"\"\" if encode : value = encode ( value ) self . _xattr [ key ] = value","title":"set_xattr()"},{"location":"#osxmetadata.osxmetadata.OSXMetaData.to_json","text":"Return all MDItem metadata (or a subset defined by attributes) as a JSON string Parameters: Name Type Description Default attributes Set [ str ] set of attributes to include in JSON ASDICT_ATTRIBUTES indent int indent level for JSON output 4 Returns: Type Description str JSON string Notes datetime objects are converted to ISO 8601 format binary objects are converted to base64 encoded strings the resulting JSON will include 3 additional keys: _version, _filepath, and _filename; these are expected by the CLI backup/restore commands Source code in osxmetadata/osxmetadata.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def to_json ( self , attributes : t . Set [ str ] = ASDICT_ATTRIBUTES , indent : int = 4 ) -> str : \"\"\"Return all MDItem metadata (or a subset defined by attributes) as a JSON string Args: attributes: set of attributes to include in JSON indent: indent level for JSON output Returns: JSON string Notes: datetime objects are converted to ISO 8601 format binary objects are converted to base64 encoded strings the resulting JSON will include 3 additional keys: _version, _filepath, and _filename; these are expected by the CLI backup/restore commands \"\"\" dict_data = self . asdict ( attributes ) # add fields that backup/restore expects dict_data . update ( { \"_version\" : __version__ , \"_filepath\" : self . _posix_path , \"_filename\" : self . _fname . name , } ) for key , value in dict_data . items (): if isinstance ( value , datetime . datetime ): dict_data [ key ] = value . isoformat () elif isinstance ( value , ( list , tuple )): if value and isinstance ( value [ 0 ], datetime . datetime ): dict_data [ key ] = [ v . isoformat () for v in value ] elif isinstance ( value , bytes ): dict_data [ key ] = base64 . b64encode ( value ) . decode ( \"ascii\" ) return json . dumps ( dict_data , indent = indent )","title":"to_json()"}]}